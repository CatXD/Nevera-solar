//variables
#include <Stdlib.h>
#include <String.h>


 int g_nInputNodes=0;
 int g_nOutputNodes=0;

 int g_nStepCount=0;

//ParÃ¡metros principales:

float Ip_vacio=0.01;
float t_vacio=0.01;

float t_subida=0.005;

float t_muestreo=0.05;

float Vbus_ref=24;

//Variables:

float tiempo=0, t0=0;

float Vbus=0, Ibus=0;

float Ip=0, Vp=0, Vp_vacio=0, Vp_ref = 0;

float duty=0, duty_ref = 0;

float trig=0;

int estado=0, estado_ans=0;

int T1H = 0, T1L = 0;

//constantes



//Programas
g_nStepCount++;

// In case of error, uncomment next two lines. Set *pnError to 1 and copy Error message to szErrorMsg
 //*pnError=1;
 //strcpy(szErrorMsg, "Place Error description here.");
 

tiempo=t-t0; //actualizo tiempo

trig=in[0];
Vp=in[1];
Ip=in[2];
Vbus=in[3];
Ibus=in[4];

switch (estado)
{
case 0:	//Parada para medir Vp vacio
    duty = 0;
    if ( estado != estado_ans)
    {
        t0 = t;
        tiempo = 0;
        estado_ans = estado;
    }
    if ( tiempo > 0.001)
    {
        Vp_ref = 0.8 * Vp;
        estado = 1;		//soft start
    }
    break;
case 1:    //soft start
    if ( estado != estado_ans)
    {
        t0 = t;
        tiempo = 0;
        estado_ans = estado;
    }
    duty_ref = ((2*Vbus)/Vp_ref)/6;

    if (duty_ref > 0.99) duty_ref = 0.99;
    if (duty_ref < 0) duty_ref = 0;
    duty = duty_ref*(tiempo/t_subida); //elevo poco a poco el duty

    if (duty >= duty_ref*0.95)
    {
	duty = duty_ref;
	estado = 2;
    }
    break;
case 2:    //regimen permanente
    if ( estado != estado_ans)
    {
        t0 = t;
        tiempo = 0;
        estado_ans = estado;
    }
    duty = ((2*Vbus)/Vp_ref)/6;

    if (duty > 0.99) duty = 0.99;
    if (duty < 0) duty = 0;
    
    if (tiempo >= 0.10) estado = 0;
    break;
}

T1H= trig>=(1-duty)?1:0;
T1L= trig<=(-1+duty)?1:0;

out[0] = T1H;
out[1] = T1L;


